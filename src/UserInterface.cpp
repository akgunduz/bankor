/////////////////////////////////////////////////////////////////////////////
// Name:        UserInterface.cpp
// Purpose:     
// Author:      Haluk Akgunduz
// Modified by: 
// Created:     Thu 22 Oct 2015 14:22:19 EEST
// RCS-ID:      
// Copyright:   All rights reserved
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), Thu 22 Oct 2015 14:22:19 EEST

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
#include "wx/imaglist.h"
////@end includes

#include "UserInterface.h"
#include "Common.h"
#include "Device.h"
#include "Distributor.h"
#include "Collector.h"
#include "ExecutorContent.h"

////@begin XPM images
////@end XPM images


/*
 * UserInterface type definition
 */

IMPLEMENT_CLASS( UserInterface, wxFrame )


/*
 * UserInterface event table definition
 */

BEGIN_EVENT_TABLE( UserInterface, wxFrame )

////@begin UserInterface event table entries
    EVT_TOGGLEBUTTON( ID_DIST_INIT, UserInterface::OnDistInitClick )
    EVT_BUTTON( ID_DIST_POLL, UserInterface::OnDistPollClick )
    EVT_TOGGLEBUTTON( ID_COLL_INIT, UserInterface::OnCollInitClick )
    EVT_BUTTON( ID_COLL_PROCESS, UserInterface::OnCollProcessClick )
    EVT_TOGGLEBUTTON( ID_NODE_INIT, UserInterface::OnNodeInitClick )
////@end UserInterface event table entries

END_EVENT_TABLE()


/*
 * UserInterface constructors
 */

UserInterface::UserInterface()
{
    Init();
}

UserInterface::UserInterface( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create( parent, id, caption, pos, size, style );
}


/*
 * UserInterface creator
 */

bool UserInterface::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin UserInterface creation
    wxFrame::Create( parent, id, caption, pos, size, style );

    CreateControls();
    Centre();
////@end UserInterface creation
    
    ui_event = new wxEventTypeTag<wxCommandEvent>(wxNewEventType());
    Bind(*ui_event, &UserInterface::updateUI, this, 0, UI_UPDATE_MAX - 1, NULL);
    uiUpdater[UI_UPDATE_LOG] = &UserInterface::updateLog;

    distInit();
    collInit();
    nodeInit();
    return true;
}


/*
 * UserInterface destructor
 */

UserInterface::~UserInterface()
{
////@begin UserInterface destruction
////@end UserInterface destruction
}


/*
 * Member initialisation
 */

void UserInterface::Init()
{
////@begin UserInterface member initialisation
    distBackupRate = NULL;
    distConnectInterface = NULL;
    distAddress = NULL;
    distBackupStatus = NULL;
    distInitBtn = NULL;
    distPollBtn = NULL;
    distCollList = NULL;
    distNodeList = NULL;
    distLog = NULL;
    collDistAddress = NULL;
    collConnectInterface = NULL;
    collAddress = NULL;
    collNodeAddress = NULL;
    collInitBtn = NULL;
    collProcessBtn = NULL;
    collFileList = NULL;
    collExecList = NULL;
    collLog = NULL;
    nodeCollAddress = NULL;
    nodeConnectInterface = NULL;
    nodeAddress = NULL;
    nodeState = NULL;
    nodeInitBtn = NULL;
    nodeFileList = NULL;
    nodeExecList = NULL;
    nodeLog = NULL;
////@end UserInterface member initialisation
}


/*
 * Control creation for UserInterface
 */

void UserInterface::CreateControls()
{    
////@begin UserInterface content construction
    // Generated by DialogBlocks, Thu 22 Oct 2015 15:02:09 EEST (unregistered)

    UserInterface* itemFrame1 = this;

    wxNotebook* itemNotebook2 = new wxNotebook( itemFrame1, ID_NOTEBOOK, wxDefaultPosition, wxDefaultSize, wxBK_DEFAULT );

    wxPanel* itemPanel3 = new wxPanel( itemNotebook2, ID_PANEL_DISTRIBUTOR, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxTAB_TRAVERSAL );
    itemPanel3->SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY);
    wxStaticText* itemStaticText4 = new wxStaticText( itemPanel3, wxID_STATIC, _("Connect Interface :"), wxPoint(10, 30), wxDefaultSize, 0 );

    wxStaticText* itemStaticText5 = new wxStaticText( itemPanel3, wxID_STATIC, _("Backup Rate :"), wxPoint(10, 70), wxDefaultSize, 0 );

    wxStaticText* itemStaticText6 = new wxStaticText( itemPanel3, wxID_STATIC, _("Collectors :"), wxPoint(10, 180), wxDefaultSize, 0 );

    distBackupRate = new wxTextCtrl( itemPanel3, ID_DIST_BACKUP_RATE, wxEmptyString, wxPoint(150, 66), wxSize(130, -1), 0 );

    wxArrayString distConnectInterfaceStrings;
    distConnectInterface = new wxChoice( itemPanel3, ID_DIST_CONNECT_INTERFACE, wxPoint(150, 26), wxSize(130, -1), distConnectInterfaceStrings, 0 );

    wxStaticText* itemStaticText9 = new wxStaticText( itemPanel3, wxID_STATIC, _("Binded Address :"), wxPoint(310, 30), wxDefaultSize, 0 );

    wxStaticText* itemStaticText10 = new wxStaticText( itemPanel3, wxID_STATIC, _("Backup Status :"), wxPoint(310, 70), wxDefaultSize, 0 );

    wxStaticText* itemStaticText11 = new wxStaticText( itemPanel3, wxID_STATIC, _("Nodes :"), wxPoint(310, 180), wxDefaultSize, 0 );

    distAddress = new wxStaticText( itemPanel3, ID_DIST_BINDED_ADDRESS, _("0"), wxPoint(450, 30), wxSize(130, -1), wxALIGN_RIGHT|wxST_NO_AUTORESIZE );

    distBackupStatus = new wxStaticText( itemPanel3, ID_DIST_BACKUP_STATUS, _("0"), wxPoint(450, 70), wxSize(130, -1), wxALIGN_RIGHT|wxST_NO_AUTORESIZE );

    distInitBtn = new wxToggleButton( itemPanel3, ID_DIST_INIT, _("Init"), wxPoint(10, 110), wxSize(270, 50), 0 );
    distInitBtn->SetValue(false);

    distPollBtn = new wxButton( itemPanel3, ID_DIST_POLL, _("Poll"), wxPoint(310, 110), wxSize(270, 50), 0 );

    distCollList = new wxListCtrl( itemPanel3, ID_DIST_COLL_LIST, wxPoint(10, 220), wxSize(270, 200), wxLC_REPORT );

    distNodeList = new wxListCtrl( itemPanel3, ID_DIST_NODE_LIST, wxPoint(310, 220), wxSize(270, 200), wxLC_REPORT );

    wxArrayString distLogStrings;
    distLog = new wxListBox( itemPanel3, ID_DIST_LOG, wxPoint(10, 440), wxSize(570, 180), distLogStrings, wxLB_SINGLE );

    itemNotebook2->AddPage(itemPanel3, _("Distributor"));

    wxPanel* itemPanel19 = new wxPanel( itemNotebook2, ID_PANEL_COLLECTOR, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxTAB_TRAVERSAL );
    itemPanel19->SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY);
    collDistAddress = new wxStaticText( itemPanel19, ID_COLL_DIST_ADDRESS, _("0"), wxPoint(160, 70), wxSize(120, -1), wxALIGN_RIGHT|wxST_NO_AUTORESIZE );

    wxStaticText* itemStaticText21 = new wxStaticText( itemPanel19, wxID_STATIC, _("Distributor Address :"), wxPoint(10, 70), wxDefaultSize, 0 );

    wxStaticText* itemStaticText22 = new wxStaticText( itemPanel19, wxID_STATIC, _("Files :"), wxPoint(10, 180), wxDefaultSize, 0 );

    wxArrayString collConnectInterfaceStrings;
    collConnectInterface = new wxChoice( itemPanel19, ID_COLL_CONNECT_INTERFACE, wxPoint(150, 26), wxSize(130, -1), collConnectInterfaceStrings, 0 );

    wxStaticText* itemStaticText24 = new wxStaticText( itemPanel19, wxID_STATIC, _("Binded Address :"), wxPoint(310, 30), wxDefaultSize, 0 );

    wxStaticText* itemStaticText25 = new wxStaticText( itemPanel19, wxID_STATIC, _("Last Node Address :"), wxPoint(310, 70), wxDefaultSize, 0 );

    wxStaticText* itemStaticText26 = new wxStaticText( itemPanel19, wxID_STATIC, _("Executors :"), wxPoint(310, 180), wxDefaultSize, 0 );

    collAddress = new wxStaticText( itemPanel19, ID_COLL_BINDED_ADDRESS, _("0"), wxPoint(450, 30), wxSize(130, -1), wxALIGN_RIGHT|wxST_NO_AUTORESIZE );

    collNodeAddress = new wxStaticText( itemPanel19, ID_COLL_NODE_ADDRESS, _("0"), wxPoint(460, 70), wxSize(120, -1), wxALIGN_RIGHT|wxST_NO_AUTORESIZE );

    collInitBtn = new wxToggleButton( itemPanel19, ID_COLL_INIT, _("Init"), wxPoint(10, 110), wxSize(270, 50), 0 );
    collInitBtn->SetValue(false);

    collProcessBtn = new wxButton( itemPanel19, ID_COLL_PROCESS, _("Process"), wxPoint(310, 110), wxSize(270, 50), 0 );

    collFileList = new wxListCtrl( itemPanel19, ID_COLL_FILE_LIST, wxPoint(10, 220), wxSize(270, 200), wxLC_REPORT );

    wxArrayString collExecListStrings;
    collExecList = new wxListBox( itemPanel19, ID_COLL_EXEC_LIST, wxPoint(310, 220), wxSize(270, 200), collExecListStrings, wxLB_SINGLE );

    wxArrayString collLogStrings;
    collLog = new wxListBox( itemPanel19, ID_COLL_LOG, wxPoint(10, 440), wxSize(570, 180), collLogStrings, wxLB_SINGLE );

    wxStaticText* itemStaticText34 = new wxStaticText( itemPanel19, wxID_STATIC, _("Connect Interface :"), wxPoint(10, 30), wxDefaultSize, 0 );

    itemNotebook2->AddPage(itemPanel19, _("Collector"));

    wxPanel* itemPanel35 = new wxPanel( itemNotebook2, ID_NODE_BINDED_ADDRESS, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxTAB_TRAVERSAL );
    itemPanel35->SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY);
    nodeCollAddress = new wxStaticText( itemPanel35, ID_NODE_COLL_ADDRESS, _("0"), wxPoint(160, 70), wxSize(120, -1), wxALIGN_RIGHT|wxST_NO_AUTORESIZE );

    wxStaticText* itemStaticText37 = new wxStaticText( itemPanel35, wxID_STATIC, _("Collector Address :"), wxPoint(10, 70), wxDefaultSize, 0 );

    wxStaticText* itemStaticText38 = new wxStaticText( itemPanel35, wxID_STATIC, _("Files :"), wxPoint(10, 180), wxDefaultSize, 0 );

    wxArrayString nodeConnectInterfaceStrings;
    nodeConnectInterface = new wxChoice( itemPanel35, ID_NODE_CONNECT_INTERFACE, wxPoint(150, 26), wxSize(130, -1), nodeConnectInterfaceStrings, 0 );

    wxStaticText* itemStaticText40 = new wxStaticText( itemPanel35, wxID_STATIC, _("Binded Address :"), wxPoint(310, 30), wxDefaultSize, 0 );

    wxStaticText* itemStaticText41 = new wxStaticText( itemPanel35, wxID_STATIC, _("State :"), wxPoint(310, 70), wxDefaultSize, 0 );

    wxStaticText* itemStaticText42 = new wxStaticText( itemPanel35, wxID_STATIC, _("Executors :"), wxPoint(310, 180), wxDefaultSize, 0 );

    nodeAddress = new wxStaticText( itemPanel35, ID_NODE_BINDED_ADDRESS, _("0"), wxPoint(450, 30), wxSize(130, -1), wxALIGN_RIGHT|wxST_NO_AUTORESIZE );

    nodeState = new wxStaticText( itemPanel35, ID_NODE_STATE, _("0"), wxPoint(450, 70), wxSize(130, -1), wxALIGN_RIGHT|wxST_NO_AUTORESIZE );

    nodeInitBtn = new wxToggleButton( itemPanel35, ID_NODE_INIT, _("Init"), wxPoint(10, 110), wxSize(570, 50), 0 );
    nodeInitBtn->SetValue(false);

    nodeFileList = new wxListCtrl( itemPanel35, ID_NODE_FILE_LIST, wxPoint(10, 220), wxSize(270, 200), wxLC_REPORT );

    wxArrayString nodeExecListStrings;
    nodeExecList = new wxListBox( itemPanel35, ID_NODE_EXEC_LIST, wxPoint(310, 220), wxSize(270, 200), nodeExecListStrings, wxLB_SINGLE );

    wxArrayString nodeLogStrings;
    nodeLog = new wxListBox( itemPanel35, ID_NODE_LOG, wxPoint(10, 440), wxSize(570, 180), nodeLogStrings, wxLB_SINGLE );

    wxStaticText* itemStaticText49 = new wxStaticText( itemPanel35, wxID_STATIC, _("Connect Interface :"), wxPoint(10, 30), wxDefaultSize, 0 );

    itemNotebook2->AddPage(itemPanel35, _("Node"));

////@end UserInterface content construction
}


/*
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_DIST_INIT
 */

void UserInterface::OnDistInitClick( wxCommandEvent& event )
{
    if (wxStrcmp(distInitBtn->GetLabel(), "Init") == 0) {

        try {
            distCollList->DeleteAllItems();
            distNodeList->DeleteAllItems();

            char path[PATH_MAX];
            sprintf(path, "%s/%s/", getcwd(nullptr, 0), DISTRIBUTOR_PATH);
            mkdir(path, 0777);

            double backupRate = 0;
            distBackupRate->GetLineText(0).ToDouble(&backupRate);

            distObject = new Distributor((uint32_t)distConnectInterface->GetSelection(),
                                         (uint32_t)distConnectInterface->GetSelection(), path, backupRate);

        } catch (std::runtime_error &e) {

            return;
        }

        distLog->Clear();
        distBackupRate->SetEditable(false);
        distInitBtn->SetLabel("Stop");

    } else {

        delete distObject;
        distBackupRate->SetEditable(true);
        distInitBtn->SetLabel("Init");
        distAddress->SetLabel("");
    }
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_DIST_POLL
 */

void UserInterface::OnDistPollClick( wxCommandEvent& event )
{
    distObject->reset();
    distCollList->DeleteAllItems();
    distNodeList->DeleteAllItems();

    distObject->sendWakeupMessagesAll();
}


/*
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_COLL_INIT
 */

void UserInterface::OnCollInitClick( wxCommandEvent& event )
{
    if (wxStrcmp(collInitBtn->GetLabel(), "Init") == 0) {

        try {
            char path[PATH_MAX];
            sprintf(path, "%s/%s/", getcwd(nullptr, 0), COLLECTOR_PATH);
            mkdir(path, 0777);

            collObject = new Collector((uint32_t)collConnectInterface->GetSelection(),
                                       (uint32_t)collConnectInterface->GetSelection(), path);

        } catch (std::runtime_error &e) {

            return;
        }

        collLog->Clear();
        collInitBtn->SetLabel("Stop");

    } else {

        delete collObject;
        collInitBtn->SetLabel("Init");
        collAddress->SetLabel("");
    }
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_COLL_PROCESS
 */

void UserInterface::OnCollProcessClick( wxCommandEvent& event )
{
    collFileList->DeleteAllItems();
    collExecList->Clear();

    collObject->syncTime();

    collObject->processRule();

}


/*
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_NODE_INIT
 */

void UserInterface::OnNodeInitClick( wxCommandEvent& event )
{
    if (wxStrcmp(nodeInitBtn->GetLabel(), "Init") == 0) {

        try {
            char path[PATH_MAX];
            sprintf(path, "%s/%s/", getcwd(nullptr, 0), CLIENT_PATH);
            mkdir(path, 0777);

            nodeObject = new Node((uint32_t)nodeConnectInterface->GetSelection(),
                                    (uint32_t)nodeConnectInterface->GetSelection(), path);

        } catch (std::runtime_error &e) {

            return;
        }

        nodeLog->Clear();
        nodeInitBtn->SetLabel("Stop");

    } else {

        delete nodeObject;
        nodeInitBtn->SetLabel("Init");
        nodeAddress->SetLabel("");
    }
}


/*
 * Should we show tooltips?
 */

bool UserInterface::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap UserInterface::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin UserInterface bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end UserInterface bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon UserInterface::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin UserInterface icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end UserInterface icon retrieval
}


void UserInterface::updateUIEvent(int id, void *data) {

    wxCommandEvent event(*ui_event);
    event.SetId(id);
    event.SetClientData(data);
    wxPostEvent(this, event);

}

void UserInterface::updateUI(wxCommandEvent& event) {

    int id = event.GetId();

    if (uiUpdater[id] != nullptr) {
        ((this)->*(uiUpdater[id]))(event);
    }

}

void UserInterface::updateLog(wxCommandEvent& event) {

    EventData *data = (EventData *)event.GetClientData();
   // genericLog->Append(data->dataStr);

}

void UserInterface::distInit() {

    int width = distCollList->GetSize().GetWidth() / 2 - 1;

    wxListItem column;
    column.SetId(0);
    column.SetText( _("Address") );
    column.SetWidth(width);
    distCollList->InsertColumn(0, column);

    column.SetId(1);
    column.SetText( _("Attached Node") );
    column.SetWidth(width);
    distCollList->InsertColumn(1, column);

    width = distNodeList->GetSize().GetWidth() / 2 - 1;

    column.SetId(0);
    column.SetText( _("Address") );
    column.SetWidth(width);
    distNodeList->InsertColumn(0, column);

    column.SetId(1);
    column.SetText( _("State") );
    column.SetWidth(width);
    distNodeList->InsertColumn(1, column);

    uiUpdater[UI_UPDATE_DIST_ADDRESS] = &UserInterface::distUpdateAddresses;
    uiUpdater[UI_UPDATE_DIST_COLL_LIST] = &UserInterface::distAddtoCollectorList;
    uiUpdater[UI_UPDATE_DIST_CLIENT_LIST] = &UserInterface::distAddtoNodeList;
    uiUpdater[UI_UPDATE_DIST_BACKUP] = &UserInterface::distUpdateBackup;
    uiUpdater[UI_UPDATE_DIST_LOG] = &UserInterface::distUpdateLog;

    if (Device::getCount() > 0) {
        for (uint32_t i = 0; i < Device::getCount(); i++) {
            distConnectInterface->Insert(wxString(sInterfaces[Device::getType(i)]) + " --> " + Device::getName(i), i);
        }
        distConnectInterface->Select(0);
    }
}

void UserInterface::distUpdateAddresses(wxCommandEvent &event) {

    EventData *data = (EventData *)event.GetClientData();
    distAddress->SetLabel(Address::getString(data->data64_1));

}

void UserInterface::distAddtoCollectorList(wxCommandEvent &event) {

    long i = 0;

    EventData *data = (EventData *)event.GetClientData();

    for (; i < distCollList->GetItemCount(); i++) {

        std::string item = distCollList->GetItemText(i, 0).ToStdString();
        std::string address = Address::getString(data->data64_1);

        if (address.compare(item) == 0) {
            break;
        }

    }

    if (i == distCollList->GetItemCount()) {
        i = distCollList->InsertItem(distCollList->GetItemCount(), 0);
    }

    distCollList->SetItem(i, 0, Address::getString(data->data64_1));
    distCollList->SetItem(i, 1, wxString::Format(wxT("%ld"), data->data64_1));

    if (data->data64_2 > 0) {
        distCollList->SetItem(i, 1, Address::getString(data->data64_2));
    } else {
        distCollList->SetItem(i, 1, "No Available Node!!");
    }

}

void UserInterface::distAddtoNodeList(wxCommandEvent &event) {

    long i = 0;

    EventData *data = (EventData *)event.GetClientData();

    for (; i < distNodeList->GetItemCount(); i++) {

        std::string item = distNodeList->GetItemText(i, 0).ToStdString();
        std::string address = Address::getString(data->data64_1);

        if (address.compare(item) == 0) {
            break;
        }

    }

    if (i == distNodeList->GetItemCount()) {
        i = distNodeList->InsertItem(distNodeList->GetItemCount(), 0);
    }

    distNodeList->SetItem(i, 0, Address::getString(data->data64_1));
    distNodeList->SetItem(i, 1, sStates[data->data64_2]);

}

void UserInterface::distUpdateBackup(wxCommandEvent &event) {

    EventData *data = (EventData *)event.GetClientData();

    distBackupStatus->SetLabelText(wxString::Format(wxT("%ld"), data->data64_1));

}

void UserInterface::distUpdateLog(wxCommandEvent &event) {

    EventData *data = (EventData *)event.GetClientData();

    distLog->Append(wxString::Format("%s", data->dataStr));

}

void UserInterface::collInit() {

    int width = collFileList->GetSize().GetWidth() / 5 - 1;

    wxListItem column;
    column.SetId(0);
    column.SetText( _("Name") );
    column.SetWidth(width * 4);
    collFileList->InsertColumn(0, column);

    column.SetId(1);
    column.SetText( _("State") );
    column.SetWidth(width);
    collFileList->InsertColumn(1, column);

    uiUpdater[UI_UPDATE_COLL_ADDRESS] = &UserInterface::collUpdateAddresses;
    uiUpdater[UI_UPDATE_COLL_ATT_DIST_ADDRESS] = &UserInterface::collUpdateAttachedDistAddress;
    uiUpdater[UI_UPDATE_COLL_ATT_CLIENT_ADDRESS] = &UserInterface::collUpdateAttachedNodeAddress;
    uiUpdater[UI_UPDATE_COLL_FILE_LIST] = &UserInterface::collUpdateFileList;
    uiUpdater[UI_UPDATE_COLL_EXEC_LIST] = &UserInterface::collUpdateExecList;
    uiUpdater[UI_UPDATE_COLL_LOG] = &UserInterface::collUpdateLog;

    if (Device::getCount() > 0) {
        for (uint32_t i = 0; i < Device::getCount(); i++) {
            collConnectInterface->Insert(wxString(sInterfaces[Device::getType(i)]) + " --> " + Device::getName(i), i);
        }
        collConnectInterface->Select(0);
    }
}

void UserInterface::collUpdateAddresses(wxCommandEvent &event) {

    EventData *data = (EventData *)event.GetClientData();
    collAddress->SetLabel(Address::getString(data->data64_1));

}

void UserInterface::collUpdateAttachedDistAddress(wxCommandEvent &event) {

    EventData *data = (EventData *)event.GetClientData();
    collDistAddress->SetLabel(Address::getString(data->data64_1));

}

void UserInterface::collUpdateAttachedNodeAddress(wxCommandEvent &event) {

    EventData *data = (EventData *)event.GetClientData();
    collNodeAddress->SetLabel(Address::getString(data->data64_1));

}

void UserInterface::collUpdateLog(wxCommandEvent &event) {

    EventData *data = (EventData *)event.GetClientData();
    collLog->Append(wxString::Format("%s", data->dataStr));

}

void UserInterface::collUpdateFileList(wxCommandEvent &event) {

    Rule *rule = (Rule *)event.GetClientData();

    for (int j = 0; j < rule->getContentCount(RULE_FILES); j++) {

        FileContent *content = (FileContent *) rule->getContent(RULE_FILES, j);
        if (content == nullptr) {
            return;
        }

        long i = 0;

        for (; i < collFileList->GetItemCount(); i++) {

            if (collFileList->GetItemText(i, 0).Cmp(content->getPath()) == 0) {
                break;
            }

        }

        if (i == collFileList->GetItemCount()) {
            i = collFileList->InsertItem(collFileList->GetItemCount(), "");
        }

        collFileList->SetItem(i, 0, content->getPath());
        collFileList->SetItem(i, 1, content->isValid() ? "V" : "I");
    }

}

void UserInterface::collUpdateExecList(wxCommandEvent &event) {

    Rule *rule = (Rule *)event.GetClientData();

    for (int j = 0; j < rule->getContentCount(RULE_EXECUTORS); j++) {

        ExecutorContent *content = (ExecutorContent *) rule->getContent(RULE_EXECUTORS, j);
        if (content == nullptr) {
            return;
        }

        collExecList->Append(content->getExec());

    }

}


void UserInterface::nodeInit() {

    int width = nodeFileList->GetSize().GetWidth() / 5 - 1;

    wxListItem column;
    column.SetId(0);
    column.SetText( _("Name") );
    column.SetWidth(width * 4);
    nodeFileList->InsertColumn(0, column);

    column.SetId(1);
    column.SetText( _("State") );
    column.SetWidth(width);
    nodeFileList->InsertColumn(1, column);

    uiUpdater[UI_UPDATE_CLIENT_ADDRESS] = &UserInterface::nodeUpdateAddresses;
    uiUpdater[UI_UPDATE_CLIENT_STATE] = &UserInterface::nodeUpdateState;
    uiUpdater[UI_UPDATE_CLIENT_ATT_COLL_ADDRESS] = &UserInterface::nodeUpdateAttachedCollAddress;
    uiUpdater[UI_UPDATE_CLIENT_FILE_LIST] = &UserInterface::nodeUpdateFileList;
    uiUpdater[UI_UPDATE_CLIENT_EXEC_LIST] = &UserInterface::nodeUpdateExecList;
    uiUpdater[UI_UPDATE_CLIENT_LOG] = &UserInterface::nodeUpdateLog;

    if (Device::getCount() > 0) {
        for (uint32_t i = 0; i < Device::getCount(); i++) {
            nodeConnectInterface->Insert(wxString(sInterfaces[Device::getType(i)]) + " --> " + Device::getName(i), i);
        }
        nodeConnectInterface->Select(0);
    }

}

void UserInterface::nodeUpdateAddresses(wxCommandEvent &event) {

    EventData *data = (EventData *)event.GetClientData();
    nodeAddress->SetLabel(Address::getString(data->data64_1));
}

void UserInterface::nodeUpdateState(wxCommandEvent &event) {

    EventData *data = (EventData *)event.GetClientData();
    nodeState->SetLabel(sStates[data->data64_1]);

}

void UserInterface::nodeUpdateAttachedCollAddress(wxCommandEvent &event) {

    EventData *data = (EventData *)event.GetClientData();
    nodeCollAddress->SetLabel(Address::getString(data->data64_1));

}

void UserInterface::nodeUpdateLog(wxCommandEvent &event) {

    EventData *data = (EventData *)event.GetClientData();
    nodeLog->Append(wxString::Format("%s", data->dataStr));

}

void UserInterface::nodeUpdateFileList(wxCommandEvent &event) {

    Rule *rule = (Rule *)event.GetClientData();

    for (int j = 0; j < rule->getContentCount(RULE_FILES); j++) {

        FileContent *content = (FileContent *) rule->getContent(RULE_FILES, j);
        if (content == nullptr) {
            return;
        }

        long i = 0;

        for (; i < nodeFileList->GetItemCount(); i++) {

            if (nodeFileList->GetItemText(i, 0).Cmp(content->getPath()) == 0) {
                break;
            }

        }

        if (i == nodeFileList->GetItemCount()) {
            i = nodeFileList->InsertItem(nodeFileList->GetItemCount(), "");
        }

        nodeFileList->SetItem(i, 0, content->getPath());
        nodeFileList->SetItem(i, 1, content->isValid() ? "V" : "I");
    }

}

void UserInterface::nodeUpdateExecList(wxCommandEvent &event) {

    Rule *rule = (Rule *)event.GetClientData();

    for (int j = 0; j < rule->getContentCount(RULE_EXECUTORS); j++) {

        ExecutorContent *content = (ExecutorContent *) rule->getContent(RULE_EXECUTORS, j);
        if (content == nullptr) {
            return;
        }

        nodeExecList->Append(content->getExec());

    }

}
